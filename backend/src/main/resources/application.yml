spring:
  application:
    name: mtlverse-backend
  
  profiles:
    active: dev
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/mtlverse}
    username: ${DATABASE_USERNAME:mtlverse_user}
    password: ${DATABASE_PASSWORD:mtlverse_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
    open-in-view: false
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:}
            client-secret: ${GOOGLE_CLIENT_SECRET:}
            scope: email,profile
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo
            user-name-attribute: id

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,application/javascript
  tomcat:
    max-connections: 8192
    accept-count: 100
    threads:
      max: 200
      min-spare: 10

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.mtlverse: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE_PATH:./logs/mtlverse.log}

# Custom application properties
app:
  jwt:
    secret: ${JWT_SECRET:your-super-secret-jwt-key-here}
    expiration: ${JWT_EXPIRATION:86400000}
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}
  
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  
  file:
    upload-dir: ${FILE_UPLOAD_DIR:./uploads}
    max-size: ${MAX_FILE_SIZE:10485760}
    allowed-types: ${ALLOWED_FILE_TYPES:image/jpeg,image/png,image/webp}
    storage-path: ${FILE_STORAGE_PATH:./uploads}
    storage-url: ${FILE_STORAGE_URL:http://localhost:8081}
  
  storage:
    provider: ${STORAGE_PROVIDER:local}  # local, r2, supabase
    r2:
      account-id: ${R2_ACCOUNT_ID:}
      access-key: ${R2_ACCESS_KEY:}
      secret-key: ${R2_SECRET_KEY:}
      bucket-name: ${R2_BUCKET_NAME:mtlverse}
      public-url: ${R2_PUBLIC_URL:}
    supabase:
      url: ${SUPABASE_URL:}
      anon-key: ${SUPABASE_ANON_KEY:}
      bucket-name: ${SUPABASE_BUCKET_NAME:mtlverse}
  
  external-apis:
    webtoon:
      base-url: ${WEBTOON_API_BASE_URL:https://api.webtoons.com}
      api-key: ${WEBTOON_API_KEY:}
      timeout: 30000
    translation:
      google:
        api-key: ${GOOGLE_TRANSLATE_API_KEY:}
        base-url: https://translation.googleapis.com
      deepl:
        api-key: ${DEEPL_API_KEY:}
        base-url: https://api-free.deepl.com
  
  ml-service:
    base-url: ${ML_SERVICE_URL:http://localhost:8000}
    timeout: 60000
  
  cache:
    ttl:
      user-session: 86400
      webtoon-metadata: 3600
      chapter-content: 1800
      translation-result: 604800
      api-response: 900
  
  rate-limit:
    requests: ${RATE_LIMIT_REQUESTS:100}
    window: ${RATE_LIMIT_WINDOW:3600}
    burst: ${RATE_LIMIT_BURST:200}

---
# Development profile
spring:
  config:
    activate:
      on-profile: dev
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  h2:
    console:
      enabled: true

logging:
  level:
    com.mtlverse: DEBUG
    org.springframework.web: DEBUG

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
  datasource:
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10

logging:
  level:
    com.mtlverse: INFO
    org.springframework: WARN
    org.hibernate: WARN

---
# Docker profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/mtlverse
  data:
    redis:
      host: redis
